# Test m칩dulo y clase documentados
>>> import __import__('7-base_geometry') as mod
>>> print(bool(mod.__doc__ and mod.__doc__.strip()))
True
>>> print(bool(mod.BaseGeometry.__doc__ and mod.BaseGeometry.__doc__.strip()))
True

# Instanciaci칩n y dir()
>>> bg = mod.BaseGeometry()
>>> print(isinstance(bg, mod.BaseGeometry))
True
>>> print('area' in dir(bg))
True
>>> print('integer_validator' in dir(bg))
True

# area() - debe lanzar excepci칩n
>>> try:
...     bg.area()
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[Exception] area() is not implemented

# integer_validator() con valores v치lidos
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# integer_validator() con valor tipo string -> TypeError
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] name must be an integer

# integer_validator() con valor 0 -> ValueError
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] age must be greater than 0

# integer_validator() con valor negativo -> ValueError
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] distance must be greater than 0

# integer_validator() con valor float -> TypeError
>>> try:
...     bg.integer_validator("length", 13.5)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] length must be an integer

# integer_validator() con valor booleano True (que no es int) -> TypeError
>>> try:
...     bg.integer_validator("flag", True)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] flag must be an integer

# integer_validator() con valor None -> TypeError
>>> try:
...     bg.integer_validator("none_value", None)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] none_value must be an integer

# integer_validator() con valor lista -> TypeError
>>> try:
...     bg.integer_validator("list_value", [3])
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] list_value must be an integer

# integer_validator() con valor tupla -> TypeError
>>> try:
...     bg.integer_validator("tuple_value", (4,))
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] tuple_value must be an integer

# integer_validator() con valor set -> TypeError
>>> try:
...     bg.integer_validator("set_value", {3, 4})
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] set_value must be an integer
